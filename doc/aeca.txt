NAME
  aeca - play audio elementary cellular automata

SYNOPSIS
  aeca [-c <cells>] [-d] [-g <generations>] [-q] [-r <rule>] [-s <seed>]

DESCRIPTION
  aeca generates generations of cells that evolve according to an elementary cellular
  automata rule. The generations are concatenated and converted to a raw audio stream
  consisting of unsigned 8-bit samples. Dead cells become samples with amplitude 0,
  and alive cells become samples with amplitude 255. aeca writes the stream to a file
  and tries to play it as if it has this format:

    Unsigned 8 bit, Rate 44100 Hz, Mono

  aeca does that by invoking the external program "aplay":

    $ aplay -t raw -f U8 -r 44100 -c 1 <filename>

  Playing and keeping the file is optional. See the options -q and -d.

  Evolutions start from either a fixed state or a random state that is seeded
  manually. The former tend to sound tonal, whereas the latter tend to sound atonal.
  See the option -s.

  The file has a name that encodes how it was produced. For example, a file with the
  name r60s0c256g256.aeca.pcm can be reproduced by an invocation equivalent to

    $ aeca -r 60 -s 0 -c 256 -g 256

OPTIONS
  -c <cells>
    The positive integer <cells> specifies the number of cells in a generation.
    Defaults to 256. Must be less than 4294967296.

  -d
    Delete the file after trying to play it.

  -g <generations>
    The positive integer <generations> specifies the number of generations.
    Defaults to 256. Must be less than 4294967296.

  -q
    Be quiet by not trying to play the file.

  -r <rule>
    The nonnegative integer <rule> specifies the rule.
    Defaults to 60. Must be less than 256.

  -s <seed>
    The nonnegative integer <seed> specifies the seed used to randomize the 1st
    generation. Seed 0 is special; it does not randomize the 1st generation but
    instead places only 1 alive cell in its middle.
    Defaults to 0. Must be less than 4294967296.

EXIT STATUS
  1 if an option is invalid;
  2 if an option argument is invalid;
  3 if allocating memory fails;
  4 if opening the file fails;
  5 if the host environment has no command processor;
  0 otherwise;

SEE ALSO
  aplay(1), eca.txt
