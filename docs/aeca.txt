NAME
  aeca - play audible elementary cellular automata

SYNOPSIS
  aeca [-c <cells>] [-g <generations>] [-r <rule>] [-s <seed>]

DESCRIPTION
  aeca generates generations of cells that evolve according to an elementary cellular
  automata rule. The generations are concatenated and converted to a raw audio stream
  consisting of unsigned 8 bit samples. Dead cells become samples with amplitude 0,
  and alive cells become samples with amplitude 255. aeca writes the stream to a file
  and tries to play it as if it has the following format.

    Unsigned 8 bit, Rate 44100 Hz, Mono

  aeca does that by invoking the external program aplay as follows.

    aplay -t raw -f U8 -r 44100 <filename>

  Evolutions start from either a fixed state or a random state that is seeded
  manually. The former tend to sound tonal, while the latter tend to sound atonal.

  The aeca file has a filename that encodes how it was generated. For example, a file
  with the filename 'c1024g512r90s0.aeca.pcm' can be reproduced by an invocation
  equivalent to the following.

    aeca -c 1024 -g 512 -r 90 -s 0

  A file generated with a nonzero seed could be irreproducible on different systems
  because of a possibly different implementation of the random number generator used.

OPTIONS
  -c <cells>
    The decimal positive integer <cells> specifies the number of cells in a
    generation.
    The default is 1024.

  -g <generations>
    The decimal positive integer <generations> specifies the number of generations.
    The default is 512.

  -r <rule>
    The decimal nonnegative integer <rule> specifies the rule and should be less than
    256.
    The default is 90.

  -s <seed>
    The decimal nonnegative integer <seed> specifies the seed used to randomize the
    1st generation. The seed 0 does not randomize the 1st generation but instead
    places only 1 alive cell in the middle of it.
    The default is 0.

EXIT STATUS
  1 if an option is invalid;
  2 if an option argument is invalid;
  3 if opening the file fails;
  4 if the host environment has no command processor;
  0 otherwise;

SEE ALSO
  aplay(1)  eca
